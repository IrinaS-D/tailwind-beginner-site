import Config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
[
  {:admin, Legendary.Admin},
  {:app, AppWeb},
  {:core, Legendary.AuthWeb},
  {:content, Legendary.Content},
  {:core, Legendary.CoreWeb},
  {:object_storage, Legendary.ObjectStorageWeb}
]
|> Enum.map(fn {otp_app, module} ->
  config otp_app, Module.concat(module, "Endpoint"),
    http: [port: String.to_integer(System.get_env("PORT") || "4000")],
    debug_errors: true,
    code_reloader: true,
    check_origin: false,
    watchers: [
      node: [
        "node_modules/webpack/bin/webpack.js",
        "--mode",
        "development",
        "--watch",
        "--watch-options-stdin",
        "--progress",
        cd: Path.expand("../apps/#{otp_app}/assets", __DIR__)
      ]
    ]

  config otp_app, AppWeb.Endpoint,
    live_reload: [
      patterns: [
        ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
        ~r"priv/gettext/.*(po)$",
        ~r"(live|views)/.*(ex)$",
        ~r"templates/.*(eex)$",
        ~r"lib/app_web/components/.*(ex|sface)$"
      ]
    ]
end)

[
  {:admin, Legendary.Admin.Repo},
  {:app, App.Repo},
  {:content, Legendary.Content.Repo},
  {:core, Legendary.Core.Repo},
  {:object_storage, Legendary.ObjectStorage.Repo}
]
|> Enum.map(fn {otp_app, repo} ->
  config otp_app, repo,
    username: "postgres",
    password: "postgres",
    database: "legendary_dev",
    hostname: "localhost",
    show_sensitive_data_on_connection_error: true,
    pool_size: 10
end)

config :core, Legendary.CoreMailer, adapter: Bamboo.LocalAdapter

config :surface, :components, [
  {Surface.Components.Form.ErrorTag, default_translator: {AppWeb.ErrorHelpers, :translate_error}}
]

config :libcluster,
  topologies: [
    erlang_hosts: [
      strategy: Elixir.Cluster.Strategy.Gossip
    ]
  ]

# Use this configuration to use Waffle with our internal object storage engine
#   that simulates S3
config :waffle,
  storage: Waffle.Storage.S3,
  bucket: "uploads",
  asset_host: "http://localhost:4000/uploads"

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

config :object_storage,
  bucket_name: "uploads"

config :ex_aws,
  access_key_id: "dev-test-access-key-id",
  secret_access_key: "dev-test-secret-access-key"

config :ex_aws, :s3,
  scheme: "http://",
  host: "localhost",
  port: 4000
